# 2 번째 수업 복습
# 표준 입출력 print() 함수
# 입력 받는 input() 함수 복습

print(100)
print( 70 + 30)

# 문자열 출력

print("가나다라")
print("Hello World!")
#작은 따옴표 가능
print('Hello World!')
# SyntaxError: unterminated string literal (detected at line 1)
# SyntaxError 이유는 구문 오류 뭐가 빠졌는지 확인하기.

#  여러개 출력하기
print(1, 2, 3)
print('Hello','Python')
print("Hello" + "Python") #붙여쓰기 됨.

'''print()에서 변수나 값 여러 개를 콤마(,)로 구분하면 값 사이에 공백(space)을 넣어 출력
만약 값 사이에 공백이 아닌 다른 문자를 넣어 출력 가능
sep는 구분자라는 의미로 separator의 약어.
sep 뒤에 나오는 구분자는 출력하려고 하는 값과 값 사이에 적용'''
print(1, 2, 3, sep= ', ')
print(4, 5, 6, sep=',')
print("Hello", "python",sep='')
print("010","1234","5678", sep='-')

#  print() 함수는 기본적으로 출력 후 줄이 바뀜
print('Hello')
print('World')
print('Good')
print('job')
#  end 문장 출력 후 마지막에 무엇을 쓰고 끝낼지 정할 수 있음
#  print()를 여러 번 사용하지만, 한 줄에 여러 값을 출력하고 싶을 때 사용
print('Hello',end='')
print('World',end='')
print('Good',end='')
print('job')

print('Hello',end=' ')
print('World',end=' ')
print('Good',end=' ')
print('job')

# \n를 문자열에 넣어 출력하면 다른 출력 없이 줄만 바뀌게 됨 (New Line)
print('1\n2\n3')
#sep 옵션
print(1, 2, 3, sep='\n')

#  문자열 안에 사용함. 다만 화면에 출력되지는 않지만 출력 결과를 제어한다고 해서 제어 문자라 부름. 또한, 제어 문자는\로 시작하는 이스케이프 시퀀스 라고함

'''
'\n: 다음 줄로 이동하며 개행
\t: 탭 문자, 키보드의 Tab 키와 같으며 여러 칸을 띄움
\\: \문자 자체를 출력할 때는 \를 두 번 사용함 
'''

''' 
많은 프로그래밍 언어들은 구문이 끝날 때 ;(세미콜론)을 붙여함. 하지만 파이썬은 붙이지 않아도 됨
다만 한 줄에 여러 구문을 사용할 때는 세미콜론 사용
'''
print('Hello'); print('1234')

## 실습 ##

#  정수값 15와 37의 합을 표시

print(15+37)

#   정수값 15로부터 37을 뺀 값을 계산하고 "15에서 37을 뺀 값은 -22입니다.” 라고 표시하는 프로그램을 작성하세요.

print("15에서 37을 뺀 값은",15-37,"입니다.")

#   아래와 같이 표시하는 프로그램을 작성하세요. 단 프로그램 중에 print() 함수는 1회만 사용합니다.

print('동','서','남','북', sep = '\n')
# 혹은
print("동\n서\n남\n북")

#   아래와 같이 표시하는 프로그램을 작성하세요. 단 프로그램 중에 print() 함수는 1회만 사용합니다.

print("여보세요\n안녕하세요\n\n그럼 이만.")

#   정수를 저장하는 변수에 75를 넣고, 그 값을 표시하는 프로그램을 작성세요
#  실행결과 : no의 값은 75입니다.
no = 75
print("no의 값은",no,"입니다.")

#  빈칸을 채워 아래와 같이 날짜와 시간이 출력되는 프로그램을 작성하세요.
# 2021/10/31 11:29:42 sep 와 end 옵션 사용

print("2021","10","31", sep='/',end=' '); print("11","29","42", sep=':' )
#혹은
year = 2021
month = 10
day = 31
hour = 11
min = 29
sec = 42
print(year,month,day, sep='/',end = ' ')
print(hour,min,sec, sep=':')

'''
input() 함수
형식 : 
문자열 부분이 출력되고 사용자의 입력이 변수에 저장됨

input() 함수의 괄호 안에 질문을 입력해서 프롬프트에 띄워 줌

입력은 문자열로 받는 것이라 숫자로 사용하려면  int()- 정수  함수나 float() - 실수 함수를 이용해서 정수나 실수로 변환해야 함

'''

#  문자열 입력

name = input("이름이 무엇인가요? ")  # 변수에 입력함수 저장
print("만나서 반갑습니다. " + name + "씨!")
age = input("몇 살인가요?")
print("네, 그러면 당신은 " + age + " 살이시군요, " + name + "씨!")
'''
첫 번째 정수: 10
두 번째 정수: 20
합은  1020 ** 문자열 답 2진법
'''
x = input("첫 번째 정수 : ")
y = input("두 번째 정수 : ")
sum = x + y
print(sum)

#  정수로 10진법 결과

x = int(input("첫 번째 정수 : "))
y = int(input("두 번째 정수 : "))
sum = x + y
print(sum)

## 실습 ##

#  아래와 같이 읽어 들인 정수값을 변수에 저장하고 그 값을 표시하는 프로그램을 작성하세요
#  no의 값을 입력해주세요 : 32
#  no의 값은 32 입니다.

no = input("no의 값을 입력해주세요 :")
print("no의 값은",no,"입니다.")

# 아래와 같이 읽어 들인 정수값에서 10을 뺀 값을 표시하는 프로그램을 작성하세요.
# 정수를 입력해주세요 : 57
# 이 값에서 10을 빼면 47 입니다.

x = int(input("정수를 입력해주세요 : "))
diff = x - 10
print("이 값에서 10을 빼면",diff,"입니다.")
# print 구문에 diff 변수 없애고 그대로 'x-10'을 넣기.

#  아래와 같이 읽어 들인 두개의 정수의 곱을 표시하는 프로그램을 작성하세요
# 두 개의 정수를 입력해주세요.
# 정수1 : 27
# 정수2 : 35
# 이들의 곱은 945 입니다.

print("두 개의 정수를 입력해주세요.")
x = int(input("정수1 : "))
y = int(input("정수2 : "))
# z = x*y
print("이들의 곱은",x*y,"입니다.")

# 아래와 같이 읽어 들인 세 개의 정수의 합을 표시하는 프로그램을 작성하세요
# 세 개의 정수를 입력해주세요.
# 정수1 : 7
# 정수2 : 15
# 정수3 : 23
# 이들의 합은 45 입니다.

print("세 개의 정수를 입력해주세요.")
n1 = int(input("정수1 : "))
n2 = int(input("정수2 : "))
n3 = int(input("정수3 : "))
print("이들의 합은",n1+n2+n3,"입니다.")

'''
주석(comment)
사전적 의미: 낱말이나 문장의 뜻을 쉽게 풀이하는 글

프로그램에 대한 설명을 위해 사용하는 설명글 
    파이썬 인터프리터가 처리하지 않음

주석 처리하고 싶은 부분의 앞에 #을 사용
# 뒤에 있는 내용은 처리하지 않음
'''

# 사각형의 가로 길이
# width = 10
# 사각형의 세로 길이
# height = 20
# 사각형의 면적 계산
# area = width * height
##
# 이 프로그램은 사용자로부터 2개의 정수를 받아서
# 합을 계산한다.
x = int(input("첫 번째 정수: "))
y = int(input("두 번째 정수: "))
sum = x + y
#diff = x - y
print("합은 ", sum)

''' 
블록 주석 
특정 구역 전체를 주석 처리할 수도 있음
작은따옴표(')나 큰따옴표(")를 연달아 세 개를 사용
'''

'''
블록 주석 시작
d = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 
print(d)
블록 주석 끝
'''


''' 
들여쓰기(indentation)
코드를 읽기 쉽도록 일정한 간격을 띄워서 작성하는 방법

하지만!!
   파이썬에서는 들여쓰기 자체가 문법!! (반드시 지켜야함)
   만약 들여쓰기를 하지 않는다면 문법 에러가 난다.
'''

# 들여쓰기 방법
# 파이썬 들여쓰기 방법은 공백(스페이스) 2칸, 4간, 탭(tab)등의 방법이 있다.

# 다 가능 하지만 파이썬 코딩 스타일 가이드(pep8)에서는 공 4칸으로 규정하고있다. (tab)

# 한 줄에 작성하는 코드가 길어지면 가독성이 떨어짐
# 여러 줄로 나누어 코드 작성하기
# 괄호() 로 묶어서 코드를 작성

# ex

s = ("Hello"
     +" World")
print(s)
